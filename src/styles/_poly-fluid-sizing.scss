@use 'sass:math';

@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list, $i), "space");
    }
  }
  @return $newList;
}

@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list, 1);
    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, "space");
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge(
      $sortedMap,
      (
        $key: map-get($map, $key),
      )
    );
  }
  @return $sortedMap;
}

@function linear-interpolation($map) {
  $keys: map-keys($map);
  @if (length($keys) != 2) {
    @error "linear-interpolation() $map must be exactly 2 values";
  }
  $m: math.div(
    (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))),
    (nth($keys, 2) - nth($keys, 1))
  );

  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  $sign: "+";
  @if ($b < 0) {
    $sign: "-";
    $b: abs($b);
  }

  @return calc(#{$m * 100}vw #{$sign} #{$b});
}

@mixin poly-fluid-sizing($property, $map) {
  $length: length(map-keys($map));

  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values";
  }

  $map: map-sort($map);
  $keys: map-keys($map);

  #{$property}: map-get($map, nth($keys, 1));

  @for $i from 1 through ($length - 1) {
    @media (min-width: nth($keys,$i)) {
      $value1: map-get($map, nth($keys, $i));
      $value2: map-get($map, nth($keys, ($i + 1)));
      @if ($value1 != $value2) {
        #{$property}: linear-interpolation(
          (
            nth($keys, $i): $value1,
            nth($keys, ($i + 1)): $value2,
          )
        );
      } @else {
        #{$property}: $value1;
      }
    }
  }

  @media (min-width: nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys, $length));
  }
}
