---
import { minify as terse, MinifyOptions } from "terser";
import fs from "node:fs";
import path from "node:path";
import crypto from "node:crypto";
import { createRequire } from "node:module";
const moduleRequire = createRequire(import.meta.url);
const { JSDOM } = moduleRequire("jsdom");

export interface Props {
  src?: string | string[];
  inline?: boolean;
  minify?: boolean;
  minifyOptions?: MinifyOptions;
  publicPath?: string;
}

const {
  src,
  inline = true,
  minify = true,
  minifyOptions,
  publicPath = "public",
} = Astro.props as Props;

const slot = Astro.slots.default;
let script = "";

const sources = Array.isArray(src) ? src : [src];

if (!(src || slot)) {
  throw new Error(
    "The src Prop can't be empty when no child script is passed!"
  );
}

if (!slot) {
  sources.forEach((src) => {
    if (!src.startsWith("/")) {
      throw new Error(
        "The src Prop must start with '/' and your JS files must be inside the public folder or resolved with Astro.resolve!"
      );
    }
    if (path.extname(src) !== ".js") {
      throw new Error("The src Prop must be a JS file!");
    }
  });

  sources.forEach((src) => {
    const filepath = src.startsWith("/_astro/")
      ? src.replace("/_astro/", "")
      : "public" + src;
    script += fs.readFileSync(filepath, "utf8");
  });

  script = minify ? (await terse(script, minifyOptions)).code : script;

  if (inline) {
    script = `<script>${script}</script>`;
  } else {
    const dir = `${publicPath}/astro-script`;
    const hash = crypto
      .createHash("sha256")
      .update(script)
      .digest("hex")
      .substr(0, 8);
    fs.existsSync(dir) || fs.mkdirSync(dir);
    fs.writeFileSync(`${dir}/${hash}.js`, script);
    script = `<script src="/astro-script/${hash}.js"></script>`;
  }
}

if (src && slot) {
  console.warn(
    "WARNING: Inlined scripts are ignored when the src Prop is present"
  );
}
---

<!-- prettier-ignore -->

{
  src ? (
    script
  ) : slot ? (
    (async () => {
      let script = "";
      const { document } = new JSDOM(await (<slot />)).window;
      script =
        document.querySelector("script")?.textContent ||
        document.body.textContent;
      script = minify ? (await terse(script)).code : script;
      return `<script>${script}</script>`;
    })()
  ) : (
    ""
  )
}
