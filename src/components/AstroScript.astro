---
import { minify as terse } from "terser";
import fs from "fs";
import path from "path";
import crypto from "crypto";
import { JSDOM } from "jsdom";

export interface Props {
  src?: string | string[];
  inline?: boolean;
  minify?: boolean;
  minifyOptions?: object;
  publicPath?: string;
  dev?: boolean;
}

const {
  src,
  inline = true,
  minify = true,
  minifyOptions = {},
  publicPath = "public",
  dev = import.meta.env.MODE !== "development",
} = Astro.props as Props;

const slot = Astro.slots.default;
const sources = Array.isArray(src) ? src : [src];

if (!(src || slot)) {
  throw new Error(
    "The src Prop can't be empty when no child script is passed!"
  );
}

if (src && slot) {
  console.warn(
    "WARNING: Inlined scripts are ignored when the src Prop is present"
  );
}

let script = "";

if (!slot) {
  sources.forEach((src) => {
    if (!src.startsWith("/")) {
      throw new Error(
        "The src Prop must start with '/' and your JS files must be inside the public folder or resolved with Astro.resolve!"
      );
    }
    if (path.extname(src) !== ".js") {
      throw new Error("The src Prop must be a JS file!");
    }
  });

  if (dev) {
    for (const src of sources) {
      if (src.match("(http://|https://).*")) {
        script += await (await fetch(src)).text();
      } else {
        let source;
        src.startsWith("/") && (source = src.slice(1));
        source.startsWith("src") || (source = "public/" + source);
        script += fs.readFileSync(source, "utf8");
      }
    }

    minify && (script = (await terse(script, minifyOptions)).code);

    if (inline) {
      script = "<script>" + script + "</script>";
    } else {
      const dir = `${publicPath}/astro-script`;
      const hash = crypto
        .createHash("sha256")
        .update(script)
        .digest("hex")
        .substring(0, 8);
      const basename = typeof src === "string" ? path.basename(src, ".js") : "";
      const filename = `${basename}-${hash}.js`;
      const filepath = `${dir}/${filename}`;

      fs.existsSync(dir) || fs.mkdirSync(dir);
      fs.existsSync(filepath)
        ? fs.readFileSync(filepath, "utf8") === script
          ? fs.writeFileSync(filepath, script)
          : null
        : fs.writeFileSync(filepath, script);

      script = `<script src="/astro-script/${filename}"></script>`;
    }
  }
}

const getSlotScripts = async (slot) => {
  const { scripts } = new JSDOM(slot).window.document;
  const rawscript = [...scripts].map((script) => script.textContent).join("\n");
  // prettier-ignore
  script = "<script>" + minify ? (await terse(rawscript, minifyOptions)).code : rawscript + "</script>";
  return script;
};
---

{src
  ? dev
    ? script
    : sources.map((src) => <script src={src} />)
  : slot
  ? await getSlotScripts(await (<slot />))
  : ""}
